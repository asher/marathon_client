#!/usr/bin/env ruby

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'marathon'))
require 'slop'


opts = Slop.parse(:help => true) do
  on :v, 'Print the version' do
    puts "Version #{Marathon::VERSION}"
  end


  command 'start' do
    description 'Start a new app.'

    on :H=, :marathon_host=, 'Marathon host (default http://localhost:8080, or MARATHON_HOST)'
    on :i=, :id=, 'A unique identifier for the app.'
    on :C=, :command=, 'The command to start the app.'
    on :n=, :num_instances=, 'The number of instances to run (default 1).', :as => Integer
    on :c=, :cpus=, 'The number of CPUs to give to this app, can be a fraction (default 1.0).', :as => Float
    on :m=, :mem=, 'The memory limit for this app, in MB, can be a fraction (default 10.0).', :as => Float
    on :u=, :uri=, 'URIs to download and unpack into the working directory.', :as => Array
    on :e=, :env=, 'Environment variables to add to the process, as NAME=VALUE.', :as => Array

    run do |opts, args|
      app_opts = {
        :instances => opts[:num_instances] || 1,
        :uris => opts[:uri] || [],
        :cmd => opts[:command],
        :env => opts[:env].nil? ? {} : Hash[opts[:env].map { |e| e.split('=', 2) }],
        :cpus => opts[:cpus] || 1.0,
        :mem => opts[:mem] || 10.0
      }

      puts "Starting app '#{opts[:id]}'"
      res = Marathon::Client.new(opts[:marathon_host]).start(opts[:id], app_opts)
      puts res
    end
  end

  command 'scale' do
    description 'Scale the number of app instances.'

    on :H=, :marathon_host=, 'Marathon host (default http://localhost:8080, or MARATHON_HOST)'
    on :i=, :id=, 'A unique identifier for the app.'
    on :n=, :num_instances=, 'The number of instances to run.', :as => Integer

    run do |opts, args|
      puts "Scaling app '#{opts[:id]}' to #{opts[:num_instances]} instances"
      res = Marathon::Client.new(opts[:marathon_host]).scale(opts[:id], opts[:num_instances])
      puts res
    end
  end

  command 'stop' do
    description 'Stop an app and remove it from Marathon.'

    on :H=, :marathon_host=, 'Marathon host (default http://localhost:8080, or MARATHON_HOST)'
    on :i=, :id=, 'A unique identifier for the app.'

    run do |opts, args|
      puts "Stopping app '#{opts[:id]}'"
      res = Marathon::Client.new(opts[:marathon_host]).stop(opts[:id])
      puts res
    end
  end

  command 'list' do
    description 'Show a list of running apps and their options.'

    on :H=, :marathon_host=, 'Marathon host (default http://localhost:8080, or MARATHON_HOST)'

    run do |opts, args|
      res = Marathon::Client.new(opts[:marathon_host]).list
      if res.success?
        res.parsed_response.each do |app|
          puts "App ID:    #{app['id']}"
          puts "Command:   #{app['cmd']}"
          puts "Instances: #{app['instances']}"
          puts "CPUs:      #{app['cpus']}"
          puts "Memory:    #{app['mem']} MB"
          app['uris'].each do |uri|
            puts "URI:       #{uri}"
          end
          app['env'].each do |k, v|
            puts "ENV:       #{k}=#{v}"
          end
          puts
        end

        if res.parsed_response.empty?
          puts "No apps are currently running"
        end
      else
        puts res
      end
    end
  end
end